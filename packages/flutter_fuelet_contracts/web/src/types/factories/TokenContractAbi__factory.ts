/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from "fuels";
import { Interface, Contract } from "fuels";
import type {
  TokenContractAbi,
  TokenContractAbiInterface,
} from "../TokenContractAbi";
const _abi = {
  types: [
    {
      typeId: 0,
      type: "()",
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: "b256",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: "bool",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 3,
      type: "enum Error",
      components: [
        {
          name: "AddressAlreadyMint",
          type: 0,
          typeArguments: null,
        },
        {
          name: "CannotReinitialize",
          type: 0,
          typeArguments: null,
        },
        {
          name: "MintIsClosed",
          type: 0,
          typeArguments: null,
        },
        {
          name: "NotOwner",
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: "str[32]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 5,
      type: "str[8]",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 6,
      type: "struct Address",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: "struct ContractId",
      components: [
        {
          name: "value",
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 8,
      type: "struct TokenInitializeConfig",
      components: [
        {
          name: "name",
          type: 4,
          typeArguments: null,
        },
        {
          name: "symbol",
          type: 5,
          typeArguments: null,
        },
        {
          name: "decimals",
          type: 10,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 9,
      type: "u64",
      components: null,
      typeParameters: null,
    },
    {
      typeId: 10,
      type: "u8",
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [
        {
          name: "address",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "add_reward_admin",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "address",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "already_minted",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "burn_amount",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "burn_coins",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "caller",
      output: {
        name: "",
        type: 6,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [],
      name: "config",
      output: {
        name: "",
        type: 8,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "address",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "delete_reward_admin",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [],
      name: "get_balance",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [],
      name: "get_mint_amount",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "asset_id",
          type: 7,
          typeArguments: null,
        },
      ],
      name: "get_token_balance",
      output: {
        name: "",
        type: 9,
        typeArguments: null,
      },
      attributes: null,
    },
    {
      inputs: [
        {
          name: "config",
          type: 8,
          typeArguments: null,
        },
        {
          name: "mint_amount",
          type: 9,
          typeArguments: null,
        },
        {
          name: "owner",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "initialize",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "address",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "is_reward_admin",
      output: {
        name: "",
        type: 2,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [],
      name: "mint",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "amount",
          type: 9,
          typeArguments: null,
        },
        {
          name: "recipient",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "mint_and_transfer",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "mint_amount",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "mint_coins",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "mint_amount",
          type: 9,
          typeArguments: null,
        },
      ],
      name: "set_mint_amount",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read", "write"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "coins",
          type: 9,
          typeArguments: null,
        },
        {
          name: "address",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "transfer_coins",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
    {
      inputs: [
        {
          name: "coins",
          type: 9,
          typeArguments: null,
        },
        {
          name: "asset_id",
          type: 7,
          typeArguments: null,
        },
        {
          name: "address",
          type: 6,
          typeArguments: null,
        },
      ],
      name: "transfer_token_to_output",
      output: {
        name: "",
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: "storage",
          arguments: ["read"],
        },
      ],
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 9,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 10,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 11,
      loggedType: {
        name: "",
        type: 3,
        typeArguments: [],
      },
    },
  ],
  messagesTypes: [],
  configurables: [],
};

export class TokenContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): TokenContractAbiInterface {
    return new Interface(_abi) as unknown as TokenContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): TokenContractAbi {
    return new Contract(
      id,
      _abi,
      walletOrProvider
    ) as unknown as TokenContractAbi;
  }
}
