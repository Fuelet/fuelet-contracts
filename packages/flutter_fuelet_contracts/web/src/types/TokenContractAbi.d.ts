/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from "fuels";

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type TokenInitializeConfigInput = {
  name: string;
  symbol: string;
  decimals: BigNumberish;
};

export type TokenInitializeConfigOutput = {
  name: string;
  symbol: string;
  decimals: number;
};

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

interface TokenContractAbiInterface extends Interface {
  functions: {
    add_reward_admin: FunctionFragment;
    already_minted: FunctionFragment;
    burn_coins: FunctionFragment;
    caller: FunctionFragment;
    config: FunctionFragment;
    delete_reward_admin: FunctionFragment;
    get_balance: FunctionFragment;
    get_mint_amount: FunctionFragment;
    get_token_balance: FunctionFragment;
    initialize: FunctionFragment;
    is_reward_admin: FunctionFragment;
    mint: FunctionFragment;
    mint_and_transfer: FunctionFragment;
    mint_coins: FunctionFragment;
    set_mint_amount: FunctionFragment;
    transfer_coins: FunctionFragment;
    transfer_token_to_output: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add_reward_admin",
    values: [AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "already_minted",
    values: [AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "burn_coins",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "caller",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "config",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "delete_reward_admin",
    values: [AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_balance",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_mint_amount",
    values?: undefined
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "get_token_balance",
    values: [ContractIdInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [TokenInitializeConfigInput, BigNumberish, AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "is_reward_admin",
    values: [AddressInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: "mint", values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: "mint_and_transfer",
    values: [BigNumberish, AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "mint_coins",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "set_mint_amount",
    values: [BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_coins",
    values: [BigNumberish, AddressInput]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: "transfer_token_to_output",
    values: [BigNumberish, ContractIdInput, AddressInput]
  ): Uint8Array;

  decodeFunctionData(
    functionFragment: "add_reward_admin",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "already_minted",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "burn_coins",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "caller", data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: "config", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "delete_reward_admin",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_balance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_mint_amount",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "get_token_balance",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "initialize",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "is_reward_admin",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(functionFragment: "mint", data: BytesLike): DecodedValue;
  decodeFunctionData(
    functionFragment: "mint_and_transfer",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "mint_coins",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "set_mint_amount",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_coins",
    data: BytesLike
  ): DecodedValue;
  decodeFunctionData(
    functionFragment: "transfer_token_to_output",
    data: BytesLike
  ): DecodedValue;
}

export class TokenContractAbi extends Contract {
  interface: TokenContractAbiInterface;
  functions: {
    add_reward_admin: InvokeFunction<[address: AddressInput], void>;

    already_minted: InvokeFunction<[address: AddressInput], boolean>;

    burn_coins: InvokeFunction<[burn_amount: BigNumberish], void>;

    caller: InvokeFunction<[], AddressOutput>;

    config: InvokeFunction<[], TokenInitializeConfigOutput>;

    delete_reward_admin: InvokeFunction<[address: AddressInput], void>;

    get_balance: InvokeFunction<[], BN>;

    get_mint_amount: InvokeFunction<[], BN>;

    get_token_balance: InvokeFunction<[asset_id: ContractIdInput], BN>;

    initialize: InvokeFunction<
      [
        config: TokenInitializeConfigInput,
        mint_amount: BigNumberish,
        owner: AddressInput
      ],
      void
    >;

    is_reward_admin: InvokeFunction<[address: AddressInput], boolean>;

    mint: InvokeFunction<[], void>;

    mint_and_transfer: InvokeFunction<
      [amount: BigNumberish, recipient: AddressInput],
      void
    >;

    mint_coins: InvokeFunction<[mint_amount: BigNumberish], void>;

    set_mint_amount: InvokeFunction<[mint_amount: BigNumberish], void>;

    transfer_coins: InvokeFunction<
      [coins: BigNumberish, address: AddressInput],
      void
    >;

    transfer_token_to_output: InvokeFunction<
      [coins: BigNumberish, asset_id: ContractIdInput, address: AddressInput],
      void
    >;
  };
}
