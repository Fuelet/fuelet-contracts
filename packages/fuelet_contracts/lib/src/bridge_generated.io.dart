// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.57.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'dart:convert';
import 'dart:async';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'package:meta/meta.dart';
import 'dart:ffi' as ffi;

class FueletContractsPlatform
    extends FlutterRustBridgeBase<FueletContractsWire> {
  FueletContractsPlatform(ffi.DynamicLibrary dylib)
      : super(FueletContractsWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  wire_WalletUnlocked api2wire_WalletUnlocked(WalletUnlocked raw) {
    final ptr = inner.new_WalletUnlocked();
    _api_fill_to_wire_WalletUnlocked(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_TokenContract> api2wire_box_autoadd_token_contract(
      TokenContract raw) {
    final ptr = inner.new_box_autoadd_token_contract_0();
    _api_fill_to_wire_token_contract(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

  late final OpaqueTypeFinalizer _WalletUnlockedFinalizer =
      OpaqueTypeFinalizer(inner._drop_opaque_WalletUnlockedPtr);
  OpaqueTypeFinalizer get WalletUnlockedFinalizer => _WalletUnlockedFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_WalletUnlocked(
      WalletUnlocked apiObj, wire_WalletUnlocked wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_box_autoadd_token_contract(
      TokenContract apiObj, ffi.Pointer<wire_TokenContract> wireObj) {
    _api_fill_to_wire_token_contract(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_token_contract(
      TokenContract apiObj, wire_TokenContract wireObj) {
    wireObj.read_wallet = api2wire_WalletUnlocked(apiObj.readWallet);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class FueletContractsWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FueletContractsWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FueletContractsWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_new__static_method__TokenContract(
    int port_,
    ffi.Pointer<wire_uint_8_list> node_url,
  ) {
    return _wire_new__static_method__TokenContract(
      port_,
      node_url,
    );
  }

  late final _wire_new__static_method__TokenContractPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_new__static_method__TokenContract');
  late final _wire_new__static_method__TokenContract =
      _wire_new__static_method__TokenContractPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_config__method__TokenContract(
    int port_,
    ffi.Pointer<wire_TokenContract> that,
    ffi.Pointer<wire_uint_8_list> contract_id,
  ) {
    return _wire_config__method__TokenContract(
      port_,
      that,
      contract_id,
    );
  }

  late final _wire_config__method__TokenContractPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_TokenContract>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_config__method__TokenContract');
  late final _wire_config__method__TokenContract =
      _wire_config__method__TokenContractPtr.asFunction<
          void Function(int, ffi.Pointer<wire_TokenContract>,
              ffi.Pointer<wire_uint_8_list>)>();

  wire_WalletUnlocked new_WalletUnlocked() {
    return _new_WalletUnlocked();
  }

  late final _new_WalletUnlockedPtr =
      _lookup<ffi.NativeFunction<wire_WalletUnlocked Function()>>(
          'new_WalletUnlocked');
  late final _new_WalletUnlocked =
      _new_WalletUnlockedPtr.asFunction<wire_WalletUnlocked Function()>();

  ffi.Pointer<wire_TokenContract> new_box_autoadd_token_contract_0() {
    return _new_box_autoadd_token_contract_0();
  }

  late final _new_box_autoadd_token_contract_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_TokenContract> Function()>>(
          'new_box_autoadd_token_contract_0');
  late final _new_box_autoadd_token_contract_0 =
      _new_box_autoadd_token_contract_0Ptr
          .asFunction<ffi.Pointer<wire_TokenContract> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_WalletUnlocked(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_WalletUnlocked(
      ptr,
    );
  }

  late final _drop_opaque_WalletUnlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_WalletUnlocked');
  late final _drop_opaque_WalletUnlocked = _drop_opaque_WalletUnlockedPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_WalletUnlocked(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_WalletUnlocked(
      ptr,
    );
  }

  late final _share_opaque_WalletUnlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_WalletUnlocked');
  late final _share_opaque_WalletUnlocked = _share_opaque_WalletUnlockedPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_WalletUnlocked extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

class wire_TokenContract extends ffi.Struct {
  external wire_WalletUnlocked read_wallet;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
